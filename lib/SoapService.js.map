{"version":3,"sources":["lib/SoapService.ts"],"names":[],"mappings":"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","file":"SoapService.js","sourcesContent":["///<reference path=\"../typings/main.d.ts\"/>\n///<reference path=\"../rpos.d.ts\"/>\n\nimport fs = require(\"fs\");\nimport { Utils }  from './utils';\nimport { Server } from 'http';\nvar soap = <any>require('soap');\nvar utils = Utils.utils;\n\nvar NOT_IMPLEMENTED = {\n  Fault: {\n    attributes: { // Add namespace here. Really wanted to put it in Envelope but this should be valid\n      'xmlns:ter' : 'http://www.onvif.org/ver10/error',\n    },\n    Code: {\n      Value: \"soap:Sender\",\n      Subcode: {\n        Value: \"ter:NotAuthorized\",  \n      },\n    },\n    Reason: {\n      Text: {\n        attributes: {\n          'xml:lang': 'en',\n        },\n        $value: 'Sender not Authorized',\n      }\n    }\n  }\n};\n\n\nclass SoapService {\n  webserver: Server;\n  config: rposConfig;\n  serviceInstance: any;\n  serviceOptions: SoapServiceOptions;\n  startedCallbacks: (() => void)[];\n  isStarted: boolean;\n\n  constructor(config: rposConfig, server: Server) {\n    this.webserver = server;\n    this.config = config;\n    this.serviceInstance = null;\n    this.startedCallbacks = [];\n    this.isStarted = false;\n\n    this.serviceOptions = {\n      path: '',\n      services: null,\n      xml: null,\n      wsdlPath: '',\n      onReady: () => { }\n    };\n\n  }\n\n  starting() { }\n\n  started() { }\n\n  start() {\n    this.starting();\n\n    utils.log.info(\"Binding %s to http://%s:%s%s\", (<TypeConstructor>this.constructor).name, utils.getIpAddress(), this.config.ServicePort, this.serviceOptions.path);\n    var onReady = this.serviceOptions.onReady;\n    this.serviceOptions.onReady = () => {\n      this._started();\n      onReady();\n    };\n    this.serviceInstance = soap.listen(this.webserver, this.serviceOptions);\n\n    this.serviceInstance.on('headers', (headers, methodName) => {\n      // Use the '=>' notation so 'this' refers to the class we are in\n      // ONVIF allows GetSystemDateAndTime to be sent with no authenticaton header\n      // So we check the header and check authentication in this function\n\n      // utils.log.info('received soap header');\n      if (methodName === \"GetSystemDateAndTime\") return;\n\n      if (this.config.Username) {\n        var token = headers.Security.UsernameToken;\n        var user = token.Username;\n        var password = (token.Password.$value || token.Password);\n        var nonce = (token.Nonce.$value || token.Nonce); // handle 2 ways to map XML to the javascript data structure\n        var created = token.Created;\n\n        var onvif_username = this.config.Username;\n        var onvif_password = this.config.Password;\n\n        // digest = base64 ( sha1 ( nonce + created + onvif_password ) )\n        var crypto = require('crypto');\n        var pwHash = crypto.createHash('sha1');\n        var rawNonce = new Buffer(nonce || '', 'base64')\n        var combined_data = Buffer.concat([rawNonce,\n          Buffer.from(created, 'ascii'), Buffer.from(onvif_password, 'ascii')]);\n        pwHash.update(combined_data);\n        var generated_password = pwHash.digest('base64');\n\n        var password_ok = (user === onvif_username && password === generated_password);\n\n        if (password_ok == false) {\n          utils.log.info('Invalid username/password with ' + methodName);\n          throw NOT_IMPLEMENTED;\n        }\n      };\n    });\n    \n    this.serviceInstance.on(\"request\", (request: any, methodName: string) => {\n      utils.log.debug('%s received request %s', (<TypeConstructor>this.constructor).name, methodName);\n    });\n\n    this.serviceInstance.log = (type: string, data: any) => {\n      if (this.config.logSoapCalls)\n        utils.log.debug('%s - Calltype : %s, Data : %s', (<TypeConstructor>this.constructor).name, type, data);\n    };\n  }\n\n  onStarted(callback: () => {}) {\n    if (this.isStarted)\n      callback();\n    else\n      this.startedCallbacks.push(callback);\n  }\n\n  _started() {\n    this.isStarted = true;\n    for (var callback of this.startedCallbacks)\n      callback();\n    this.startedCallbacks = [];\n    this.started();\n  }\n}\nexport = SoapService;\n"]}
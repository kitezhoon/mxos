{"version":3,"sources":["services/imaging_service.ts"],"names":[],"mappings":"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","file":"imaging_service.js","sourcesContent":["///<reference path=\"../typings/main.d.ts\" />\n///<reference path=\"../rpos.d.ts\" />\n\nimport fs = require(\"fs\");\nimport util = require(\"util\");\nimport os = require('os');\nimport SoapService = require('../lib/SoapService');\nimport { Utils }  from '../lib/utils';\nimport { Server } from 'http';\n\nvar utils = Utils.utils;\n\nclass ImagingService extends SoapService {\n  imaging_service: any;\n  callback: any;\n\n  brightness = 0;\n  autoFocusMode = '';\n  focusNearLimit = 0;\n  focusFarLimit = 0;\n  focusDefaultSpeed = 0;\n\n  constructor(config: rposConfig, server: Server, callback) {\n    super(config, server);\n\n    this.imaging_service = require('./stubs/imaging_service.js').ImagingService;\n    this.callback = callback;\n\n    this.serviceOptions = {\n      path: '/onvif/imaging_service',\n      services: this.imaging_service,\n      xml: fs.readFileSync('./wsdl/imaging_service.wsdl', 'utf8'),\n      wsdlPath: 'wsdl/imaging_service.wsdl',\n      onReady: () => console.log('imaging_service started')\n    };\n\n    this.brightness = 50;  // range is 0..100\n    this.autoFocusMode = \"MANUAL\"; // MANUAL or AUTO\n    this.focusDefaultSpeed = 0.5; // range 0.1 to 1.0. See GetMoveOptions valid range\n    this.focusNearLimit = 1.0;  // range 0.1 to 3.0 in Metres\n    this.focusFarLimit = 0.0; // range 0.0 to 0.0.  0=Infinity\n\n    this.extendService();\n  }\n\n  extendService() {\n    var port = this.imaging_service.ImagingService.Imaging;\n\n      \n\n      //var GetServiceCapabilitiesResponse = {\n        //Capabilities : {\n          //attributes : {\n            //ImageStabilization : {xs:boolean},\n            //Presets : {xs:boolean}\n          //}\n        //}\n      //\n      //};\n\n      port.GetServiceCapabilities = (args) => {\n        var GetServiceCapabilitiesResponse = {\n          Capabilities : {\n            attributes : {\n              ImageStabilization : false,\n              Presets : false\n            }\n          }\n        };\n        return GetServiceCapabilitiesResponse;\n      };\n\n      //var GetOptions = { \n        //VideoSourceToken : { xs:string}\n      //\n      //};\n      port.GetOptions = (args /*, cb, headers*/) => {\n        var GetOptionsResponse = { \n          ImagingOptions : { \n            //BacklightCompensation : { \n              //Mode : { xs:string},\n              //Level : { \n                //Min : { xs:float},\n                //Max : { xs:float}\n              //}\n            //},\n            Brightness : { \n              Min : 0,\n              Max : 100\n            },\n            //ColorSaturation : { \n              //Min : { xs:float},\n              //Max : { xs:float}\n            //},\n            //Contrast : { \n              //Min : { xs:float},\n              //Max : { xs:float}\n            //},\n            //Exposure : { \n              //Mode : { xs:string},\n              //Priority : [{ xs:string}],\n              //MinExposureTime : { \n                //Min : { xs:float},\n                //Max : { xs:float}\n              //},\n              //MaxExposureTime : { \n                //Min : { xs:float},\n                //Max : { xs:float}\n              //},\n              //MinGain : { \n                //Min : { xs:float},\n                //Max : { xs:float}\n              //},\n              //MaxGain : { \n                //Min : { xs:float},\n                //Max : { xs:float}\n              //},\n              //MinIris : { \n                //Min : { xs:float},\n                //Max : { xs:float}\n              //},\n              //MaxIris : { \n                //Min : { xs:float},\n                //Max : { xs:float}\n              //},\n              //ExposureTime : { \n                //Min : { xs:float},\n                //Max : { xs:float}\n              //},\n              //Gain : { \n                //Min : { xs:float},\n                //Max : { xs:float}\n              //},\n              //Iris : { \n                //Min : { xs:float},\n                //Max : { xs:float}\n              //}\n            //},\n            Focus : { \n              AutoFocusModes : ['AUTO','MANUAL'],\n              DefaultSpeed : { \n                Min : 0.1,\n                Max : 1.0\n              },\n              NearLimit : { \n                Min : 0.1,\n                Max : 3.0\n              },\n              FarLimit : { \n                Min : 0.0,\n                Max : 0.0\n              },\n              //Extension : { }\n            //},\n            //IrCutFilterModes : [{ xs:string}],\n            //Sharpness : { \n              //Min : { xs:float},\n              //Max : { xs:float}\n            //},\n            //WideDynamicRange : { \n              //Mode : { xs:string},\n              //Level : { \n                //Min : { xs:float},\n                //Max : { xs:float}\n              //}\n            //},\n            //WhiteBalance : { \n              //Mode : { xs:string},\n              //YrGain : { \n                //Min : { xs:float},\n                //Max : { xs:float}\n              //},\n              //YbGain : { \n                //Min : { xs:float},\n                //Max : { xs:float}\n              //},\n              //Extension : { }\n            //},\n            //Extension : { \n              //ImageStabilization : { \n                //Mode : { xs:string},\n                //Level : { \n                  //Min : { xs:float},\n                  //Max : { xs:float}\n                //},\n                //Extension : { }\n              //},\n              //Extension : { \n                //IrCutFilterAutoAdjustment : { \n                  //BoundaryType : { xs:string},\n                  //BoundaryOffset : { xs:boolean},\n                  //ResponseTimeRange : { \n                    //Min : { xs:duration},\n                    //Max : { xs:duration}\n                  //},\n                  //Extension : { }\n                //},\n                //Extension : { \n                  //ToneCompensationOptions : { \n                    //Mode : { xs:string},\n                    //Level : { xs:boolean}\n                  //},\n                  //DefoggingOptions : { \n                    //Mode : { xs:string},\n                    //Level : { xs:boolean}\n                  //},\n                  //NoiseReductionOptions : { \n                    //Level : { xs:boolean}\n                  //},\n                  //Extension : { }\n                //}\n              //}\n            }\n          }\n        }\n        return GetOptionsResponse;\n      },\n\n\n\n    port.GetImagingSettings = (args /*, cb, headers*/) => {\n      var GetImagingSettingsResponse = {\n        ImagingSettings : {\n          Brightness : this.brightness,\n          Focus : { \n            AutoFocusMode : this.autoFocusMode,\n            DefaultSpeed : this.focusDefaultSpeed,\n            NearLimit : this.focusNearLimit,\n            FarLimit : this.focusFarLimit, // Infinity\n            //Extension : { }\n            },\n        }\n      };\n      return GetImagingSettingsResponse;\n    };\n\n        //var SetImagingSettings = { \n        //VideoSourceToken : { xs:string},\n        //ImagingSettings : { \n          //BacklightCompensation : { \n            //Mode : { xs:string},\n            //Level : { xs:float}\n          //},\n          //Brightness : { xs:float},\n          //ColorSaturation : { xs:float},\n          //Contrast : { xs:float},\n          //Exposure : { \n            //Mode : { xs:string},\n            //Priority : { xs:string},\n            //Window : { \n              //attributes : {\n                //bottom : {xs:float},\n                //top : {xs:float},\n                //right : {xs:float},\n                //left : {xs:float}\n              //}\n            //},\n            //MinExposureTime : { xs:float},\n            //MaxExposureTime : { xs:float},\n            //MinGain : { xs:float},\n            //MaxGain : { xs:float},\n            //MinIris : { xs:float},\n            //MaxIris : { xs:float},\n            //ExposureTime : { xs:float},\n            //Gain : { xs:float},\n            //Iris : { xs:float}\n          //},\n          //Focus : { \n            //AutoFocusMode : { xs:string},\n            //DefaultSpeed : { xs:float},\n            //NearLimit : { xs:float},\n            //FarLimit : { xs:float},\n            //Extension : { }\n          //},\n          //IrCutFilter : { xs:string},\n          //Sharpness : { xs:float},\n          //WideDynamicRange : { \n            //Mode : { xs:string},\n            //Level : { xs:float}\n          //},\n          //WhiteBalance : { \n            //Mode : { xs:string},\n            //CrGain : { xs:float},\n            //CbGain : { xs:float},\n            //Extension : { }\n          //},\n          //Extension : { \n            //ImageStabilization : { \n              //Mode : { xs:string},\n              //Level : { xs:float},\n              //Extension : { }\n            //},\n            //Extension : { \n              //IrCutFilterAutoAdjustment : [{ \n                //BoundaryType : { xs:string},\n                //BoundaryOffset : { xs:float},\n                //ResponseTime : { xs:duration},\n                //Extension : { }\n              //}],\n              //Extension : { \n                //ToneCompensation : { \n                  //Mode : { xs:string},\n                  //Level : { xs:float},\n                  //Extension : { }\n                //},\n                //Defogging : { \n                  //Mode : { xs:string},\n                  //Level : { xs:float},\n                  //Extension : { }\n                //},\n                //NoiseReduction : { \n                  //Level : { xs:float}\n                //},\n                //Extension : { }\n              //}\n            //}\n          //}\n        //},\n        //ForcePersistence : [{ xs:boolean}]\n      //\n      //};\n\n      port.SetImagingSettings = (args) => {\n        var SetImagingSettingsResponse = { };\n\n        // Check for Brightness value\n        if (args.ImagingSettings) {\n          if (args.ImagingSettings.Brightness) {\n            this.brightness = args.ImagingSettings.Brightness;\n            // emit the 'brightness' message to the parent\n            if (this.callback) this.callback('brightness', {value: this.brightness});\n          }\n          if (args.ImagingSettings.Focus) {\n            if (args.ImagingSettings.Focus.AutoFocusMode) {\n              this.autoFocusMode = args.ImagingSettings.Focus.AutoFocusMode;\n              if (this.callback) this.callback('focusmode', {value: this.autoFocusMode});\n            }\n            if (args.ImagingSettings.Focus.DefaultSpeed) {\n              this.focusDefaultSpeed = args.ImagingSettings.Focus.DefaultSpeed;\n              if (this.callback) this.callback('focusdefaultspeed', {value: this.focusDefaultSpeed});\n            }\n            if (args.ImagingSettings.Focus.NearLimit) {\n              this.focusNearLimit = args.ImagingSettings.Focus.NearLimit;\n              if (this.callback) this.callback('focusnearlimit', {value: this.focusNearLimit});\n            }\n            if (args.ImagingSettings.Focus.FarLimit) {\n              this.focusFarLimit = args.ImagingSettings.Focus.FarLimit;\n              if (this.callback) this.callback('focusfarlimit', {value: this.focusFarLimit});\n            }\n          }\n        }\n\n        return SetImagingSettingsResponse;\n      };\n\n        //var Move = { \n        //VideoSourceToken : { xs:string},\n        //Focus : { \n          //Absolute : { \n            //Position : { xs:float},\n            //Speed : { xs:float}\n          //},\n          //Relative : { \n            //Distance : { xs:float},\n            //Speed : { xs:float}\n          //},\n          //Continuous : { \n            //Speed : { xs:float}\n          //}\n        //}\n      //\n      //};\n      port.Move = (args) => {\n        var MoveResponse = { };\n\n        if (args.Focus) {\n          if (args.Focus.Continuous) {\n            if (this.callback) this.callback('focus', {value: args.Focus.Continuous.Speed});\n          }\n        }\n\n        return MoveResponse;\n      };\n\n      //var GetMoveOptions = {\n        //VideoSourceToken : { xs:string}\n      //\n      //};\n      port.GetMoveOptions = (args) => {\n        var GetMoveOptionsResponse = {\n          MoveOptions : {\n            //Absolute : {\n              //Position : {\n                //Min : { xs:float},\n                //Max : { xs:float}\n              //},\n              //Speed : {\n                //Min : { xs:float},\n                //Max : { xs:float}\n              //}\n            //},\n            //Relative : {\n              //Distance : {\n                //Min : { xs:float},\n                //Max : { xs:float}\n              //},\n              //Speed : {\n                //Min : { xs:float},\n                //Max : { xs:float}\n              //}\n            //},\n            Continuous : {\n              Speed : {\n                Min : -1.0,\n                Max : 1.0\n              }\n            }\n          }\n        };\n        return GetMoveOptionsResponse;\n      };\n\n      //var Stop = { \n      //VideoSourceToken : { xs:string}\n      //\n      //};\n      port.Stop = (args) => {\n        var StopResponse = { };\n\n        if (this.callback) this.callback('focusstop', {});\n\n        return StopResponse;\n      };\n\n      //var GetStatus = {\n        //VideoSourceToken : { xs:string}\n      //\n      //};\n      port.GetStatus = (args) => {\n        var GetStatusResponse = {\n          Status : {\n            FocusStatus20 : {\n              Position : 5.0,     // Need to read current focus position\n              MoveStatus : 'UNKNOWN', // MOVING IDLE or UNKNOWN\n              //Error : '',\n              //Extension : { }\n            },\n            //Extension : { }\n          }\n        };\n        return GetStatusResponse;\n      };\n\n\n\n\n  }\n}\nexport = ImagingService;\n"]}